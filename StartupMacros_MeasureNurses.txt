// Doliolid Chain Measurement Tool
//   by Patrick Duffy
//
// Purpose: This code uses ImageJ's StartupMacros procedure to create 3 macros to assist in the measurements and classification of doliolid nurses
//    (1) Replace the contents of StartupMacros.txt with this file (rename old StartupMacros.txt to save a copy)
//    (2) Launch ImageJ, load library of images to measure
//    (3) Using line-segments, measure Nurses and cadophores.
//	(3a) The first segment is oral-abhoral to measure body length.
//      (3b) The next click (thus 2nd segment) is used to re-position the target at the base of the doliolid chain/cadophore. This segment is not counted in length sums
//      (3c) Using as many line segments as necessary to trace curves, trace the length of the chain present in the ROI
//    (4) After the last click at the end of the chain, press the corresponding macro button to classify the segments and move onto the next image

// "StartupMacros"
// The macros and tools in this file ("StartupMacros.txt") are 
// automatically installed in the Plugins>Macros submenu and
// in the toolbar when ImageJ starts up.

// The "AutoRun" macro has been replaced by the Edit>Options>Startup command.

  macro "Command Finder Built-in Tool" {}
  macro "Developer Menu Built-in Tool" {}
  macro "Brush Built-in Tool" {}
  macro "Flood Filler Built-in Tool" {}
  macro "Arrow Built-in Tool" {}

  var pmCmds = newMenu("Popup Menu",
       newArray("Help...", "Rename...", "Duplicate...", "Original Scale", 
       "Paste Control...", "-", "Record...", "Capture Screen ", "Monitor Memory...", 
       "List Commands...", "Control Panel...", "Startup Macros...", "Search..."));

  macro "Popup Menu" {
      cmd = getArgument();
      if (cmd=="Help...")
           showMessage("About Popup Menu",
               "To customize this menu, edit the line that starts with\n\"var pmCmds\" in ImageJ/macros/StartupMacros.txt.");
      else
          run(cmd);
  }

 macro "-" {} //menu divider

  macro "About Startup Macros..." {
      path = getDirectory("macros")+"About Startup Macros";
      if (!File.exists(path))
          exit("\"About Startup Macros\" not found in ImageJ/macros/.");
      open(path);
  }

//for packed-cadophore doliolids
   macro "Measure Segmented Distances [p]" {
      imgID = getTitle();
//getInfo("image.subtitle"); may be needed instead of getTitle()
      if (!(selectionType==6||selectionType==10))
          exit("Segmented line or point selection required");
      getSelectionCoordinates(x, y);
      if (x.length<2)
          exit("At least two points required");
      getPixelSize(unit, pw, ph);
      n = nResults;
      distance = 0;
      setResult("ID", n, imgID);
      //create the qualitative result table based on which macro-key is hit
      setResult("Health", n, "Packed");
      for (i=1; i<x.length; i++) {
         dx = (x[i] - x[i-1])*pw;
         dy = (y[i] - y[i-1])*ph;
         distance = sqrt(dx*dx + dy*dy);
         setResult("D"+i, n, distance);
      }
      updateResults;
	run("Open Next");
	run("Original Scale");
   } 

//for empty/sparsely packed-cadophore doliolids
   macro "Measure Segmented Distances [s]" {
      imgID = getTitle();
//getInfo("image.subtitle"); may be needed instead of getTitle()
      if (!(selectionType==6||selectionType==10))
          exit("Segmented line or point selection required");
      getSelectionCoordinates(x, y);
      if (x.length<2)
          exit("At least two points required");
      getPixelSize(unit, pw, ph);
      n = nResults;
      distance = 0;
      setResult("ID", n, imgID);
      //create the qualitative result table based on which macro-key is hit
      setResult("Health", n, "Empty");
      for (i=1; i<x.length; i++) {
         dx = (x[i] - x[i-1])*pw;
         dy = (y[i] - y[i-1])*ph;
         distance = sqrt(dx*dx + dy*dy);
         setResult("D"+i, n, distance);
      }
      updateResults;
	run("Open Next");
	run("Original Scale");
   } 


//for images of just cadophores
   macro "Measure Segmented Distances [c]" {
      imgID = getTitle();
//getInfo("image.subtitle"); may be needed instead of getTitle()
      if (!(selectionType==6||selectionType==10))
          exit("Segmented line or point selection required");
      getSelectionCoordinates(x, y);
      if (x.length<2)
          exit("At least two points required");
      getPixelSize(unit, pw, ph);
      n = nResults;
      distance = 0;
      setResult("ID", n, imgID);
      //create the qualitative result table based on which macro-key is hit
      setResult("Health", n, "Cadophore");
      for (i=1; i<x.length; i++) {
         dx = (x[i] - x[i-1])*pw;
         dy = (y[i] - y[i-1])*ph;
         distance = sqrt(dx*dx + dy*dy);
         setResult("D"+i, n, distance);
      }
      updateResults;
	run("Open Next");
	run("Original Scale");
   } 


  // This example macro demonstrates how to create a
  // custom command with a keyboard shortcut.
  //macro "Save As JPEG... [j]" {
  //   quality = call("ij.plugin.JpegWriter.getQuality");
  //   quality = getNumber("JPEG quality (0-100):", quality);
  //   run("Input/Output...", "jpeg="+quality);
  //   saveAs("Jpeg");
  //}




